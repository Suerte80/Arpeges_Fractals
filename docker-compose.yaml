services:
  php:
    # Installe Composer et PHPMailer au build plutôt qu'à chaque run
    build:
      context: .
      dockerfile: Dockerfile
    image: php:8.3-apache
    container_name: php
    working_dir: /var/www/html
    volumes:
      - .:/var/www/html
    depends_on:
      - mysql
      - mailhog
    command: >
      bash -c "echo 'log_errors=On' > /usr/local/etc/php/conf.d/docker-php-log.ini &&
               echo 'error_reporting=E_ALL' >> /usr/local/etc/php/conf.d/docker-php-log.ini && # Ajout du logs des erreurs dans php.
               docker-php-entrypoint apache2-foreground"
    networks:
      - web

  node:
    image: node:20-alpine
    container_name: node
    working_dir: /app
    command: sh -c "npm install && npm run dev"
    ports:
      - "30000:30000"
      - "3001:3001"
    volumes:
      - ./:/app
    networks:
      - web
    depends_on:
      - caddy

  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - db_data:/var/lib/mysql
    networks:
      - web

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    restart: always
    environment:
      PMA_HOST: mysql
      MYSQL_ROOT_PASSWORD: ${PMA_ROOT_PASSWORD}
    networks:
      - web

  mailhog:
    image: mailhog/mailhog
    container_name: mailhog
    ports:
      - "1025:1025"
    networks:
      - web
  
  caddy:
    image: caddy:2
    depends_on:
      - php
      - mailhog
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - web

volumes:
  db_data:
  caddy_data:
  caddy_config:

networks:
  web:
